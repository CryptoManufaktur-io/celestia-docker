x-logging: &logging
  logging:
    driver: json-file
    options:
      max-size: 100m
      max-file: "3"
      tag: '{{.ImageName}}|{{.Name}}|{{.ImageFullID}}|{{.FullID}}'

services:
  consensus:
    build:
      context: ./celestia-app
      dockerfile: ${CELESTIA_APP_DOCKERFILE}
      args:
        - USER=celestia
        - DAEMON_VERSION=${CELESTIA_APP_VERSION}
        - DAEMON_HOME=/cosmos
        - DAEMON_NAME=celestia-appd
    image: celestia:${CELESTIA_APP_VERSION}
    pull_policy: never
    user: celestia
    restart: unless-stopped
    stop_grace_period: 5m
    environment:
      - DAEMON_VERSION=${CELESTIA_APP_VERSION}
      - EXTRA_FLAGS=${CELESTIA_APP_EXTRA_FLAGS:-}
      - NETWORK=${NETWORK}
      - MONIKER=${MONIKER}
      - CL_GRPC_PORT=${CL_GRPC_PORT:-9090}
      - CL_P2P_PORT=${CL_P2P_PORT:-26656}
      - CL_RPC_PORT=${CL_RPC_PORT:-26657}
      - RPC_PORT=${RPC_PORT:-8545}
      - WS_PORT=${WS_PORT:-8546}
      - SNAPSHOT=${SNAPSHOT}
      - RAPID_SYNC_URL=${RAPID_SYNC_URL}
      - DAEMON_HOME=/cosmos
      - DAEMON_NAME=celestia-appd
      - LOG_LEVEL=${LOG_LEVEL:-info}
      - PRUNING=${CELESTIA_APP_PRUNING:-default}
      - MIN_RETAIN_BLOCKS=${CELESTIA_APP_MIN_RETAIN_BLOCKS:-0}
    ports:
      - ${CL_P2P_PORT:-26656}:${CL_P2P_PORT:-26656}/tcp
      - ${CL_RPC_PORT:-26657}:${CL_RPC_PORT:-26657}/tcp
    <<: *logging
    ulimits:
      nofile:
        soft: 262144
        hard: 262144
    volumes:
      - consensus-data:/cosmos
    entrypoint:
      - docker-entrypoint.sh
      - celestia-appd
      - start
      - --home
      - /cosmos
      - --log_format
      - json
    labels:
        - traefik.enable=true
        - traefik.http.routers.${RPC_HOST}.service=${RPC_HOST}
        - traefik.http.routers.${RPC_HOST}.entrypoints=websecure
        - traefik.http.routers.${RPC_HOST}.rule=Host(`${RPC_HOST}.${DOMAIN}`)
        - traefik.http.routers.${RPC_HOST}.tls.certresolver=letsencrypt
        - traefik.http.routers.${RPC_HOST}lb.service=${RPC_HOST}
        - traefik.http.routers.${RPC_HOST}lb.entrypoints=websecure
        - traefik.http.routers.${RPC_HOST}lb.rule=Host(`${RPC_LB}.${DOMAIN}`)
        - traefik.http.routers.${RPC_HOST}lb.tls.certresolver=letsencrypt
        - traefik.http.services.${RPC_HOST}.loadbalancer.server.port=${RPC_PORT}
        - traefik.http.routers.${WS_HOST:-celestiaws}.service=${WS_HOST:-celestiaws}
        - traefik.http.routers.${WS_HOST:-celestiaws}.entrypoints=websecure
        - traefik.http.routers.${WS_HOST:-celestiaws}.rule=Host(`${WS_HOST:-celestiaws}.${DOMAIN}`)
        - traefik.http.routers.${WS_HOST:-celestiaws}.tls.certresolver=letsencrypt
        - traefik.http.routers.${WS_HOST:-celestiaws}lb.service=${WS_HOST:-celestiaws}
        - traefik.http.routers.${WS_HOST:-celestiaws}lb.entrypoints=websecure
        - traefik.http.routers.${WS_HOST:-celestiaws}lb.rule=Host(`${WS_LB:-celestiaws-lb}.${DOMAIN}`)
        - traefik.http.routers.${WS_HOST:-celestiaws}lb.tls.certresolver=letsencrypt
        - traefik.http.services.${WS_HOST:-celestiaws}.loadbalancer.server.port=${WS_PORT:-8546}
        - metrics.scrape=true
        - metrics.path=/metrics
        - metrics.port=26660
        - metrics.instance=celestia-appd
        - metrics.network=${NETWORK}

  cli:
    profiles: ["tools"]
    build:
      context: ./celestia-app
      dockerfile: ${CELESTIA_APP_DOCKERFILE}
      args:
        - USER=celestia
        - DAEMON_VERSION=${CELESTIA_APP_VERSION}
        - DAEMON_HOME=/cosmos
        - DAEMON_NAME=celestia-appd
    image: celestia:${CELESTIA_APP_VERSION}
    pull_policy: never
    user: celestia
    volumes:
      - ./keys/operator:/cosmos/keyring-test:rw
      - ./keys/consensus/priv_validator_key.json:/cosmos/config/priv_validator_key.json:rw
      - ./keys/consensus/priv_validator_state.json:/cosmos/data/priv_validator_state.json:rw

  create-validator-keys:
    profiles: ["tools"]
    build:
      context: ./celestia-app
      dockerfile: ${CELESTIA_APP_DOCKERFILE}
      args:
        - USER=celestia
        - DAEMON_VERSION=${CELESTIA_APP_VERSION}
        - DAEMON_HOME=/cosmos
        - DAEMON_NAME=celestia-appd
    image: celestia:${CELESTIA_APP_VERSION}
    pull_policy: never
    user: root
    volumes:
      - ./keys/consensus:/data/config:rw
    entrypoint: ["/bin/bash","-c"]
    command:
      - |
        celestia-appd init $MONIKER --chain-id $NETWORK --home /cosmos
        cp /cosmos/config/priv_validator_key.json /data/config/
        cp /cosmos/data/priv_validator_state.json /data/config/
        chown -R celestia:celestia /data/config/*
        echo "Validator keys created!"

  import-validator-keys:
    profiles: ["tools"]
    build:
      context: ./celestia-app
      dockerfile: ${CELESTIA_APP_DOCKERFILE}
      args:
        - USER=celestia
        - DAEMON_VERSION=${CELESTIA_APP_VERSION}
        - DAEMON_HOME=/cosmos
        - DAEMON_NAME=celestia-appd
    image: celestia:${CELESTIA_APP_VERSION}
    pull_policy: never
    user: root
    volumes:
      - consensus-data:/cosmos
      - ./keys/consensus:/data/config:rw
    entrypoint: ["/bin/bash","-c"]
    command:
      - |
        echo "Importing validator key and state file from ./keys/consensus into container"
        cp /data/config/priv_validator_key.json /cosmos/config/
        cp /data/config/priv_validator_state.json /cosmos/data/
        chown -R celestia:celestia /cosmos/config/priv_validator_key.json
        chown -R celestia:celestia /cosmos/data/priv_validator_state.json
        echo "Validator keys imported!"

  export-validator-keys:
    profiles: ["tools"]
    build:
      context: ./celestia-app
      dockerfile: ${CELESTIA_APP_DOCKERFILE}
      args:
        - USER=celestia
        - DAEMON_VERSION=${CELESTIA_APP_VERSION}
        - DAEMON_HOME=/cosmos
        - DAEMON_NAME=celestia-appd
    image: celestia:${CELESTIA_APP_VERSION}
    pull_policy: never
    user: root
    volumes:
      - consensus-data:/cosmos
      - ./keys/consensus:/data/config:rw
    entrypoint: ["/bin/bash","-c"]
    command:
      - |
        echo "Exporting validator key and state file from container to ./keys/consensus"
        cp /cosmos/config/priv_validator_key.json /data/config/
        cp /cosmos/data/priv_validator_state.json /data/config/
        echo "Validator keys exported!"

  create-operator-wallet:
    profiles: ["tools"]
    build:
      context: ./celestia-app
      dockerfile: ${CELESTIA_APP_DOCKERFILE}
      args:
        - USER=celestia
        - DAEMON_VERSION=${CELESTIA_APP_VERSION}
        - DAEMON_HOME=/cosmos
        - DAEMON_NAME=celestia-appd
    image: celestia:${CELESTIA_APP_VERSION}
    pull_policy: never
    user: root
    volumes:
      - ./keys/operator:/cosmos/keyring-test:rw
    entrypoint: ["/bin/bash","-c"]
    command:
      - |
        celestia-appd config keyring-backend test --home /cosmos > /dev/null 2>&1
        celestia-appd keys add $MONIKER --home /cosmos 2>&1 | tee /tmp/temp_backup
        [ $${PIPESTATUS[0]} -eq 0 ] && sed -n '/- address/,$$p' /tmp/temp_backup > "/cosmos/keyring-test/${MONIKER}.backup" || rm /tmp/temp_backup
        chown -R celestia:celestia /cosmos/keyring-test/*

  register-validator:
    profiles: ["tools"]
    build:
      context: ./celestia-app
      dockerfile: ${CELESTIA_APP_DOCKERFILE}
      args:
        - USER=celestia
        - DAEMON_VERSION=${CELESTIA_APP_VERSION}
        - DAEMON_HOME=/cosmos
        - DAEMON_NAME=celestia-appd
    image: celestia:${CELESTIA_APP_VERSION}
    pull_policy: never
    user: celestia
    volumes:
      - ./keys/consensus/priv_validator_key.json:/cosmos/config/priv_validator_key.json:ro
      - ./keys/operator:/cosmos/keyring-test:ro
    entrypoint: ["/bin/bash","-c"]
    command:
      - |
        echo "Validator pubkey:"
        celestia-appd --home /cosmos tendermint show-validator
        celestia-appd --home /cosmos tx staking create-validator \
        --amount=1000000utia \
        --pubkey=$(celestia-appd --home /cosmos tendermint show-validator) \
        --moniker=$MONIKER \
        --chain-id=mocha-4 \
        --commission-rate=0.1 \
        --commission-max-rate=0.2 \
        --commission-max-change-rate=0.01 \
        --min-self-delegation=1000000 \
        --from=$MONIKER \
        --keyring-backend=test \
        --fees=21000utia \
        --gas=220000 \
        --node http://consensus:$CL_RPC_PORT/

volumes:
  consensus-data:
